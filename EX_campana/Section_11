Ex. section 1

######################################################################################################

Exercise 1.1.1: IOPS limits 
Measure the upper limit of IOPS in your VM using the `dd` command and a minimal blocksize issuing 4M IOPS from /dev/zero to /dev/null.

Hint: dd if=/dev/zero of=/dev/null bs=… count=…

##########
#SOLUTION#
##########


> dd if=/dev/zero of=/dev/null bs=1 count=8M

> 8388608+0 records in
> 8388608+0 records out
> 8388608 bytes (8.4 MB, 8.0 MiB) copied, 4.9251 s, 1.7 MB/s

In this case, a small blocksize has been used, while a large amount of blocks have been sent. This 
allows for a better estimation of the number of operations per second the system can achieve: in this case, IOPS=8000000/4.9251=1.62e6 

######################################################################################################

Exercise 1.1.2: IO bandwidth limit
Measure the maximum IO performance using the dd command and a 1M blocksize from /dev/zero to /dev/null

Hint: dd if=/dev/zero of=/dev/null bs=… count=…

##########
#SOLUTION#
##########


> dd if=/dev/zero of=/dev/null bs=1M count=10000

> 10000+0 records in
> 10000+0 records out
> 10485760000 bytes (10 GB, 9.8 GiB) copied, 0.519813 s, 20.2 GB/s

In this case, a big blocksize allows for a better estimation of the bandwidth (the IOvolume/time). 
Here, bandwidth=20.2 GB/s

######################################################################################################

Exercise 1.1.3: IO Caching
Measure the maximum IO performance using the “dd” command and a 1M blocksize writing a 1G file from 
/dev/zero to /var/tmp/1G. 

Drop your buffer cache using 

`$ echo 3 > /proc/sys/vm/drop_caches` as user root.

Measure the maximum IO performance using the dd command and a 1M blocksize reading a 1G file from /var/tmp/1G to /dev/null. Repeat the measurement and explain your observation.

##########
#SOLUTION#
##########


Writing a 1G file:

> dd if=/dev/zero of=/var/tmp/1G bs=1M count=1000

> 1000+0 records in
> 1000+0 records out
> 1048576000 bytes (1.0 GB, 1000 MiB) copied, 1.01033 s, 1.0 GB/s

Now, after having dropped the cache, reading the same file:

> dd if=/var/tmp/1G of=/dev/zero bs=1M count=1000

%ADDING THE PERFORMANCE ONCE CACHE HAS BEEN REMOVED

Since the cache has been dropped, the reading performance is noticeably lower than the one that was
obtained during the writing process.

######################################################################################################

Exercise 1.1.4 IO Debugging
Inspect the IO pattern of the command “yes” using the “strace” command. You have to use Control-C to terminate the command. You can redirect the output STDOUT to /dev/null.

hint : strace <cmd> > /dev/null

##########
#SOLUTION#
##########


> strace yes > /dev/null


Using the `-c` command line, which produces a summary of the calls/signals related to the command <yes>, yielded (before being shut down by ctrl+C):


> strace -c yes > /dev/null 

> ^Cstrace: Process 5316 detached
> % time     seconds  usecs/call     calls    errors syscall
> ------ ----------- ----------- --------- --------- ----------------
> 100.00    0.000979           0    189516           write
>   0.00    0.000000           0         1           read
>   0.00    0.000000           0         3           open
>   0.00    0.000000           0         3           close
>   0.00    0.000000           0         3           fstat
>   0.00    0.000000           0         8           mmap
>   0.00    0.000000           0         4           mprotect
>   0.00    0.000000           0         1           munmap
>   0.00    0.000000           0         3           brk
>   0.00    0.000000           0         3         3 access
>   0.00    0.000000           0         1           execve
>   0.00    0.000000           0         1           arch_prctl
> ------ ----------- ----------- --------- --------- ----------------
> 100.00    0.000979                189547         3 total

######################################################################################################

Exercise 1.1.5: IO Debugging
Measure the syscall tracing overhead using the “strace” command on the baseline measurement from 1.1.1. Measure the overhead when using large blocksizes like 1M. Explain your observation.

HINT: strace <cmd>

##########
#SOLUTION#
##########


> dd if=/dev/zero of=/dev/null bs=1 count=1000000

> 1000000+0 records in
> 1000000+0 records out
> 1000000 bytes (1.0 MB, 977 KiB) copied, 0.616098 s, 1.6 MB/s

while

> strace -c dd if=/dev/zero of=/dev/null bs=1 count=1000000

> 1000000+0 records in
> 1000000+0 records out
> 1000000 bytes (1.0 MB, 977 KiB) copied, 25.5992 s, 39.1 kB/s
> % time     seconds  usecs/call     calls    errors syscall
> ------ ----------- ----------- --------- --------- ----------------
>  51.35    0.004392           0   1000003           read
>  48.56    0.004153           0   1000003           write
>   0.09    0.000008           1        10         3 open
>   0.00    0.000000           0        10           close
>   0.00    0.000000           0         5           fstat
>   0.00    0.000000           0         1           lseek
>   0.00    0.000000           0         9           mmap
>   0.00    0.000000           0         4           mprotect
>   0.00    0.000000           0         1           munmap
>   0.00    0.000000           0         3           brk
>   0.00    0.000000           0         3           rt_sigaction
>   0.00    0.000000           0         3         3 access
>   0.00    0.000000           0         2           dup2
>   0.00    0.000000           0         1           execve
>   0.00    0.000000           0         1           arch_prctl
> ------ ----------- ----------- --------- --------- ----------------
> 100.00    0.008553               2000059         6 total

Adding `strace` before the command added almost 25 seconds to the execution time. When using large blocksizes, 

> dd if=/dev/zero of=/dev/null bs=1M count=10000

> 10000+0 records in
> 10000+0 records out
> 10485760000 bytes (10 GB, 9.8 GiB) copied, 0.557685 s, 18.8 GB/s

while

> strace -c dd if=/dev/zero of=/dev/null bs=1M count=10000 

> 10000+0 records in
> 10000+0 records out
> 10485760000 bytes (10 GB, 9.8 GiB) copied, 0.96071 s, 10.9 GB/s
> % time     seconds  usecs/call     calls    errors syscall
> ------ ----------- ----------- --------- --------- ----------------
>  99.50    0.013424           1     10003           read
>   0.50    0.000068           0     10003           write
>   0.00    0.000000           0        10         3 open
>   0.00    0.000000           0        10           close
>   0.00    0.000000           0         5           fstat
>   0.00    0.000000           0         1           lseek
>   0.00    0.000000           0        10           mmap
>   0.00    0.000000           0         4           mprotect
>   0.00    0.000000           0         1           munmap
>   0.00    0.000000           0         3           brk
>   0.00    0.000000           0         3           rt_sigaction
>   0.00    0.000000           0         3         3 access
>   0.00    0.000000           0         2           dup2
>   0.00    0.000000           0         1           execve
>   0.00    0.000000           0         1           arch_prctl
> ------ ----------- ----------- --------- --------- ----------------
> 100.00    0.013492                 20060         6 total


In this case, the effect of the overhead of straceis much less dramatic, only doubling the execution time. This is because strace has to output every action performed during the execution to the dump /dev/null: when the count parameter has high values, then, the runtime increases dramatically. Blocksize, instead, does not seem as important as far as overhead goes.


