#!/usr/bin/env python
import zlib
import hashlib
import time
import sys


algorithms = [getattr(hashlib, algo) for algo in hashlib.algorithms_guaranteed if (algo!='shake_256' and algo!='shake_128')]

# a problem occurs when using the SHAKE family of hash functions. These require also the length of the string to hash.
# this creates problems when running the script. Then, i will just remove it (it is the 8th hash function)

# recall the way `getattr' works in Python;
# getattr(object, name)=object.name
# using getattr, we ask what the possible hashing algorithms names are (in hashlib.algorithms_guaranteed)
# the list algorithms will then contain all the names of guaranteed algorithms in hashlib


#algorithms.append(zlib.crc32)
#algorithms.append(zlib.adler32)


# and for good measure we also add crc32 and adler32 from the zlib library
# We are now ready, with a wide selection of hashing algorithms to try. 

def run(bytes_data, algorithm, iterations=1000):
    # this function must time the various hashing algorithms and return such time.
    # to time the performances, the function time() from the eponymous library will be used.

    m=algorithm() # creating the hash object
    start = time.time() # taking the time before the execution

    m.update(bytes_data) # feeding the hash with the initial string
    
    for i in range(iterations): # rehashing the digest over and over
        temp = m.digest()
        m.update(temp)

    finish = time.time() # taking the final time
    return finish-start


def iteration(title, sample):
    # This function takes a `title' (which is actually just one of either `long' or `short', depending on the length of the sample to hash)
    # and a sample string to hash. Then, it calls the run function over all possible algorithms in the list `algorithms'. 
    # It then prints the performance of each specific algorithm

    print(title + ' (%d chars):' % len(sample))
    values = []
    for algorithm in algorithms:
        duration = run(sample, algorithm)
        values.append((duration, algorithm))
        print('%.06fs using %s' % (duration, algorithm.__name__))
    print()
    return values


if __name__ == '__main__':
    # the `main' function of this script is simply used to launch everything else (the function `iteration', which itself calls `run').
    # Two options (also called titles in the function iteration) are used: short and long, depending on the length of the input string.

    sample = ''.join([chr(i) for i in range(32, 123)]).encode() #chr requires an integer as input and returns a code point to a unicode. Then, encode() takes that string and encodes it in UTF-8 format. In the end,  this line produces a long string, encoded in UTF-8.
    print('Python: %s' % sys.version)
    print('Sample: %s' % sample)
    print()

    iteration('Short', sample)
    iteration('Long', sample * 10000)
