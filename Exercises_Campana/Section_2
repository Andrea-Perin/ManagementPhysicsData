2.1 RAID Technology


Exercise 2.1.1: The magic of XOR

Redundancy algorithms are most of the time built on top of XOR operations or more general
galois-field multiplications to compute parities. The XOR algebra has some very particular
characteristics. Remember:

XOR	| 0	| 1    |
--------|-------|------|
0	| 0	| 1    | 
1	| 1	| 0    |

If you compute the following parity for arbitrary length data blocks X,Y,Z:

P=X^Y^Z

This formula is used to implement a RAID-4 or RAID-5 system. What is the result of the
following equation

P^X^Z^Z= ?

If you have a data blocks in your RAID system not fulfilling this equation, what can you
conclude?

HINT: Like for the sum operation the order of the operation does not matter!

SOLUTION:

If P=X^Y^Z, then P^X^Z^Z = X^Y^Z^X^Z^Z = X^X^Z^Z^Z^Y;
However, for any arbitrary string X, the result of X^X is a string of all 0s. Then, 
X^X^Z^Z^Z^Y = Z^Y. 
If a data block in the RAID system does not fulfill this equation, then there is an error in either X or Z (or even both).

###################################################################################################

Exercise 2.1.2: RAID 0 striping

Striping allows to involve several disks for single file IO by chunking files into equal blocks
(stripe size) and storing them round-robin over many disks.
Imagine you have got a large file of many GB size. You are asked to stripe this file with the best
stripe size to optimize to issue 4MB read requests from an application.

             .------.
	     | FILE |
	     '------'
	 D1  D2  D3  D4
	.---.---.---.---.
	|   |   |   |   |
	:---+---+---+---:
	|   |   |   |   |
	:---+---+---+---:
	|   |   |   |   |
	:---+---+---+---:
	|   |   |   |   |
	'---'---'---'---'


Which blocksize do you chose? Pin down the stripe pattern by labeling the empty blocks with
their block number where the block number is defined as the start offset position divided by the
size of a single block (blocks are numbered from 0 on …)

HINT: You should divide blocks in a way that you involve as many disks as possible to read a
4MB data block.

SOLUTION

There are 4x4=16 blocks total. Each 4 MB block will be divided in 1 MB chunks, spread over the 4 disks.
Then, 

.-------.-------.-------.-------.
| DISK1 | DISK2 | DISK3 | DISK4 |
:-------+-------+-------+-------:
| 0     | 1     | 2     | 3     |
:-------+-------+-------+-------:
| 4     | 5     | 6     | 7     |
:-------+-------+-------+-------:
| 8     | 9     | 10    | 11    |
'-------'-------'-------'-------'

so that each block can be accessed by using all 4 disks at a time.

###################################################################################################

Exercise 2,1.3: RAID-0 performance (less sure about this one than the others)

Consider the following measurement of the random read performance of a single hard disk.

Imagine the following scenario:
● you have striped ten 100 GB files sequentially over four hard disks and a stripe size of 1
MB - you created one file after the other
● each client can accept data faster than the aggregated maximum performance of all
hard disks (client is not IO bound)
● each client does sequential file reading issuing 16 MB block read requests (the request
is issued in parallel to all concerned disks)

Which performance do you expect from each single hard disk if you download one file after the
other?

Which performance do you expect from each single hard disk if you download all files in
parallel?

HINT: Figure out the IO pattern happening on a single disk. You can assume that concurrent
block reads (of 4MB) on a single disk are executed sequentially and not overlapping. Do you
see random or sequential IO for the two cases?

SOLUTION

From the plot, the single disk random access performance for stripe size of 1 MB is ~30 Mb/s.
Ten 100GB files = 1000 GB; in one disk, there are 250 GB. 

* downloading one file at a time (sequential downloading): 
	16 MB read requests, 4 disks -> each disk has 4 reads per block. This means that a disk will spend 4/(30/8)=0.8 s per read issue.
	This means that, since (250 GB)/(16 MB per request)=15625 requests, so that there will be a total time of 15625*0.8 s = 12500 s.
	(If the performance was in MB/s, this would be actually 1562,5s).

* downloading in parallel: 
	The same, but in 10x less time.

In the first case, for the 4 chunks in a disk for a single 16MB read request, access is sequential.
In the second, it is random.
